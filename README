main configuration files are the following in data/
*.ctrl, *.esti, *.inst
Right now, i have
optiPSSN.ctrl, pinv.esti, single_dof.inst

The following classes have been defined and might be confused with
each other: (use pdb mode and dir() to show the attributes and methods)
* in the front indicates that it changes with iteration

aosM1M3 -> M1M3:
	nodeID		FEA node ID numbers (1 or 3,indicating the node is on M1 or M3)
	bx			grid x-coordinates for the bending modes
	by			grid y-coordinates for the bending modes
	bz			bending mode z-displacements
	force		actuator forces to produce the bending modes
	bxnorm		bx normalized to be in (-1, 1)
	bynorm		by normalized to be in (-1, 1)
	zdx		   	zenith pointing  x-displacements
	zdy			zenith pointing  y-displacements
	zdz			zenith pointing  z-displacements
	zf			zenith pointing actuator forces
	hdx			horizon pointing x-displacements
	hdy			horizon pointing y-displacements
	hdz			horizon pointing z-displacements
	hf			horizon pointing actuator forces
	G			influence matrix
	
aosM2 -> M2:
	ID			actuator ID numbers
	bx			grid x-coordinates for the bending modes
	by			grid y-coordinates for the bending modes
	bz			bending mode z-displacements
	force		actuator forces to produce the bending modes
	bxnorm		bx normalized to be in (-1, 1)
	bynorm		by normalized to be in (-1, 1)

aosController->ctrl:
	filename	*.ctrl in data/
	mQ		as in (x^T Q x) in the cost function
	rho		as in J = (x^T Q x + rho^2 u^T H u)
	rhoM13		as in H = block_diag(mHr, rhoM13**2*mHM13, rhoM2**2*mHM2)
	rhoM2		as in H = block_diag(mHr, rhoM13**2*mHM13, rhoM2**2*mHM2)
	mF		pinv(Q+rho^2*H)
*	shiftGear	after it converges, we change optimal estimator to stablize the system
	strategy	control strategy, such as optiPSSN
	gain		control feedback gain
	Authority	control authority
	range	range of motion for the DOFs.

	functions():
	getMotions		determine the control motions to be applied to the next iteration
	drawControlPanel	plot Zn and what happens to Zn if we apply proposed change
	
aosEstimator ->esti
	filename	*.esti in data/
	compIdx		which columns of the senM are used
	icomp		row# for choosing compIdx
	zn3Idx		which rows of the senM are used
	izn3	        row# for choosing zn3Idx
	zn3IdxAx4	zn3Idx repeated 4 times, for indexing A matrix
	nB13Max		Max No. of M13 bending modes we might use
	nB2Max		Max No. of M2 bending modes we might use
	znMax		Max Zernike order we might use
	zn3Max		Max number of Zernike we might use, this = znMax-3
	nSingularInf	No. of singular values we set to Inf during pinv()
	ndofA		nB13Max+nB2Max+10
	normalizedA	control switch, whether or not we normalize A matrix
	senM		3D senM, 35x19x50
	senMFile	filename for senM
	strategy	estimator strategy, such as pinv	
	A		A-matrix, size is (zn3Max)x(ndofA)
	Ause		A-matrix that we actually use in estimator, after applying zn3IdxAx4 and compIdx
	Anorm		A-matrix normalized (if normalizeA==true), otherwise same as Ause
	Ainv		the pinv() of A
	xhat		estimated x, i.e., estimated system state
	yfinal	Zernikes from previous iteration, with intrinsic aberration subtracted
	yresi		 Zernikes we'd get if we apply full correction (without gain factor)

	functions():
	estimate	estimate state
	normA()		 normalize A based on control authority
	optiAinv()	 construct the optimal estimator Ainv (using state covariance & noise covariance)

aosTeleState  ->state
	inst		lsst or comcam
	instruFile	*.inst in data/, this defines the initial state, and what effect we turn on/off
	iSim		current simulation No.
*	iIter		current iteration No.
	pertDir		where the pert files are stored
*	pertFile	pert file for the current iteration
*	pertMatFile	pert matrix file for the current iteration
	imageDir	where the Phosim images and moved to and stored; also includes the Zernike fit results
	phosimDir	where the Phosim code is
	opdSize		size of Phosim OPD maps, to conform with Zemax/Phosim,
			     	this is an odd number, for example 256-1=255
	psfMag		mag of the star for PSF31
	psfStampSize	size of the PSF image stamps that we cut out
*	stateV		state vector, this = x in the cost function J
	phosimActuatorID	actuator ID used in Phosim to index the DoF
	opdx		normalized grid-x with size = opdSize (odd number)
	opdy			normalized grid-y with size = opdSize (odd number)
	OPD_inst		instance catalog file used for generating OPD maps
	OPD_cmd		command file used for generating OPD maps
	OPD_log		Phosim log from the OPD run
	PSF_inst	       instance catalog file used for generating PSF images
	zTrueFile  	filename for the zernikes from the current iteration (from Phosim, 35 points)
	zTrueFile_m1	filename for the zernikes from the previous iteration (from Phosim, 35 points)
	zAngle		zenith angle in radian

	functions():
	writePertFile		write state vector to pert file
	getOPDAll		take pert file, create Phosim command and inst files, create OPDs@35 fields
	getOPDAllfromBase
	getPSFAll		take pert file, create Phosim command and inst files, create PSFs@31 fields
	getPSFAllfromBase
	getWFSAll		take pert file, create Phosim command and inst files,
			     	  create wavefront images@4 corners
	setIterNo	manually update the iter No.
	getChipBoundary
	getCamDistortion	 
	getLUTforce
	
aosWFS          ->wfs
	nWFS	No. of wavefront sensors
	nRun	for comcam, we run phosim twice to get WFS, for lsst, only once
	wfsName		['intra', 'extra']
	offset 		  [-1.5, 1.5], in mm
	halfChip		['C1', 'C0']	
	znwcs		No. of Zernikes in cwfs output
	znwcs3		znwcs -3 (no ptt)
	cwfsDir		where the cwfs code is
	algo		algo as defined in cwfs
	inst		inst as defined in cwfs
	intrinsicWFS	intrinsic wavefront @ 4 corners, 76x1
*	myZn		results of cwfs from two exposures, 76x2
*	trueZn	true wavefront accoring to phosim (counterpart of myZn)
*	catFile	catalog file for all the good wfs stars
*	zFile  	       filename for the zernikes from the current iteration (from cwfs)
*	zFile_m1	       filename for the zernikes from the previous iteration (from cwfs)
*	zCompFile	png file that shows the comparison between Zernikes from CWFS and the truth

	functions():
	preprocess
	checkZ4C
	getZ4CfromBase
	
aosMetric      ->metr
	fieldX		x coordinate of the 35 fields, in deg.
	fieldY		y coordinate of the 35 fields, in deg.
	fieldXp		fieldX slightly modified, for PSF generation, to avoid chip edges
        fieldYp         fieldY slightly modified, for PSF generation, to avoid chip edges
	nArm		6, for distribution of 31 fields
	nRing		5, for distribution of 31 fields
	nField		31, No. of fields
	nFieldp4	=nField+4, No. of fields including the 4 corners
	pssnAlpha	alpha values used in PSSN evaluation
	w		weights for fields in Gaussian Quadrature	
	znx2		wavefront Zernikes due to x2 (uncontrolled DoF), 
			used with senM and stateV to estimate total wavefront, and FWHM
	fwhmModelFileBase	pointer to files that contains ai,bi etc. for the quadrature model of FWHMgeo
	PSSN			31x1 vector
	FWHMeff			31x1 vector
	dm5			31x1 vector

	functions():
	getPSSNandMore		calculate PSSN,FWHMeff,dm5 for 31 PSFs using Phosim OPDs or PSFs
	getEllipticity		calculate ellipticity for 31 PSFs using Phosim OPDs or PSFs
	getFWHMfromZ		calculate FWHMgeo using the quadrature model with wavefront Zernikes
	getPSSNfromZ		calculate PSSN using the alpha values with wavefront Zernikes


